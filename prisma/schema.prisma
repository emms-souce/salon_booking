generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  email         String    @unique
  emailVerified Boolean   @default(false)
  name          String?
  phone         String?
  image         String?
  role          Role      @default(USER)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  address       String?
  bio           String?
  accounts      Account[]
  bookings      Booking[]
  reviews       Review[]
  salons        Salon[]
  sessions      Session[]

  @@map("users")
}

model Session {
  id        String   @id @default(cuid())
  expiresAt DateTime
  token     String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model Account {
  id                    String    @id @default(cuid())
  accountId             String    @unique
  providerId            String
  userId                String
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("accounts")
}

model Verification {
  id         String   @id @default(cuid())
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@unique([identifier, value])
  @@map("verifications")
}

model Salon {
  id          String    @id @default(cuid())
  name        String
  description String?
  address     String
  city        String
  phone       String
  email       String?
  imageUrl    String?
  rating      Float     @default(0)
  latitude    Float?
  longitude   Float?
  isActive    Boolean   @default(true)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  ownerId     String
  bookings    Booking[]
  reviews     Review[]
  owner       User      @relation(fields: [ownerId], references: [id])
  services    Service[]

  @@map("salons")
}

model Service {
  id          String    @id @default(cuid())
  name        String
  description String?
  price       Float
  duration    Int
  category    String
  isActive    Boolean   @default(true)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  salonId     String
  bookings    Booking[]
  salon       Salon     @relation(fields: [salonId], references: [id], onDelete: Cascade)

  @@map("services")
}

model Booking {
  id         String        @id @default(cuid())
  date       DateTime
  startTime  DateTime
  endTime    DateTime
  status     BookingStatus @default(PENDING)
  notes      String?
  totalPrice Float
  createdAt  DateTime      @default(now())
  updatedAt  DateTime      @updatedAt
  userId     String
  salonId    String
  serviceId  String
  salon      Salon         @relation(fields: [salonId], references: [id])
  service    Service       @relation(fields: [serviceId], references: [id])
  user       User          @relation(fields: [userId], references: [id])

  @@map("bookings")
}

model Review {
  id        String   @id @default(cuid())
  rating    Int
  comment   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    String
  salonId   String
  salon     Salon    @relation(fields: [salonId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id])

  @@unique([userId, salonId])
  @@map("reviews")
}

enum Role {
  USER
  ADMIN
  SALON_OWNER
}

enum BookingStatus {
  PENDING
  CONFIRMED
  CANCELLED
  COMPLETED
}
